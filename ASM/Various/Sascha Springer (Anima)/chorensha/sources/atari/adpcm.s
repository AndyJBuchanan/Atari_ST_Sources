; ./vasmm68k_mot adpcm.s -Ftos -m68030 -o adpcm.ttp
; adpcm.ttp se_01.pcm
; sox -t raw -c 1 -b 8 -e signed-integer -r 15600 se_01.dat -t raw -c 1 -b 8 -e signed-integer -r 12517 se_01.sam

	text

; -----------------------------------------------------------------------------

start:
	move.l	4(sp),a0
	lea		$81(a0),a0
	lea		source_file_name,a1

.loop1:
	move.b	(a0)+,(a1)+
	jne		.loop1

	rem

		pea		source_file_name
		move	#9,-(sp)
		trap	#1
		addq	#6,sp

		move	#1,-(sp)
		trap	#1
		addq	#2,sp

	erem

	lea		source_file_name,a0
	lea		destination_file_name,a1

.loop2:
	move.b	(a0)+,d0
	jeq		.skip
	cmp.b	#'.',d0
	jeq		.skip

	move.b	d0,(a1)+
	jra		.loop2

.skip:
	move.b	#'.',(a1)+
	move.b	#'d',(a1)+
	move.b	#'a',(a1)+
	move.b	#'t',(a1)+

	rem

		pea		destination_file_name
		move	#9,-(sp)
		trap	#1
		addq	#6,sp

		move	#1,-(sp)
		trap	#1
		addq	#2,sp

	erem

	; Load source sample.

	clr		-(sp)
	pea		source_file_name
	move	#61,-(sp)
	trap	#1
	addq.l	#8,sp

	move	d0,d7
	jmi		exit	

	pea		source_sample_buffer
	move.l	#128*1024,-(sp)
	move	d7,-(sp)
	move	#63,-(sp)
	trap	#1
	lea		$c(sp),sp

	move.l	d0,d6

	move	d7,-(sp)
	move	#62,-(sp)
	trap	#1
	addq.l	#4,sp

	; Convert sample.

	lea		source_sample_buffer,a0
	lea		destination_sample_buffer,a1
	move.l	d6,d2
	jbsr	convert_adpcm_to_pcm

	move.l	d0,d6

	; Save destination sample.

	clr		-(sp)
	pea		destination_file_name
	move	#60,-(sp)
	trap	#1
	addq.l	#8,sp

	move	d0,d7
	jmi		exit	

	pea		destination_sample_buffer
	move.l	d6,-(sp)
	move	d7,-(sp)
	move	#64,-(sp)
	trap	#1
	lea		$c(sp),sp

	move	d7,-(sp)
	move	#62,-(sp)
	trap	#1
	addq.l	#4,sp

	; Exit.

exit:
	clr		-(sp)
	trap	#1

; -----------------------------------------------------------------------------
;
; Convert 4 bit ADPCM to 8 bit PCM samples.
;
; a0.l = source sample address (4 bit ADPCM).
; a1.l = destination sample address (8 bit PCM).
; d0.l = source sample frequency.
; d1.l = destination sample frequency.
; d2.l = sample lenght.
;
; -----------------------------------------------------------------------------

convert_adpcm_to_pcm:
	movem.l	d1-d7/a0-a6,-(sp)

	lea		difference_table,a2
	lea		step_size_table,a3
	move.l	a1,a4

	moveq	#-2,d3																| Chip signal.
	moveq	#0,d4																| Chip step.

.loop:
	move.b	(a0)+,d5

	move	d5,d6
	and		#$f,d6
	move	d4,d7
	lsl		#4,d7
	add		d6,d7
	add		(a2,d7.w*2),d3

	cmp		#4096-1,d3
	jle		.skip1

	move	#4096-1,d3

.skip1:
	cmp		#-4096,d3
	jge		.skip2

	move	#-4096,d3

.skip2:
	and		#$7,d6
	add		(a3,d6.w*2),d4

	cmp		#48,d4
	jle		.skip3

	move	#48,d4

.skip3:
	cmp		#0,d4
	jge		.skip4

	moveq	#0,d4

.skip4:
	move	d3,d6
	asr		#4,d6

	cmp		#-128,d6
	jge		.no_clamp1

	move	#-128,d6

.no_clamp1:
	cmp		#127,d6
	jle		.no_clamp2

	move	#127,d6

.no_clamp2:
	move.b	d6,(a1)+

	; Next 4 bit sample.

	lsr		#4,d5
	and		#$f,d5
	move	d4,d7
	lsl		#4,d7
	add		d5,d7
	add		(a2,d7.w*2),d3

	cmp		#4096-1,d3
	jle		.skip5

	move	#4096-1,d3

.skip5:
	cmp		#-4096,d3
	jge		.skip6

	move	#-4096,d3

.skip6:
	and		#$7,d5
	add		(a3,d5.w*2),d4

	cmp		#48,d4
	jle		.skip7

	move	#48,d4

.skip7:
	cmp		#0,d4
	jge		.skip8

	moveq	#0,d4

.skip8:
	move	d3,d6
	asr		#4,d6

	cmp		#-128,d6
	jge		.no_clamp3

	move	#-128,d6

.no_clamp3:
	cmp		#127,d6
	jle		.no_clamp4

	move	#127,d6

.no_clamp4:
	move.b	d6,(a1)+

	subq.l	#1,d2
	jne		.loop

	move.l	a1,d0
	sub.l	a4,d0

	movem.l	(sp)+,d1-d7/a0-a6

	rts

; -----------------------------------------------------------------------------

	data

step_size_table:
	dc		-1,-1,-1,-1,2,4,6,8

difference_table:
	dc		2,6,10,14,18,22,26,30,-2,-6,-10,-14,-18,-22,-26,-30
	dc		2,6,10,14,19,23,27,31,-2,-6,-10,-14,-19,-23,-27,-31
	dc		2,6,11,15,21,25,30,34,-2,-6,-11,-15,-21,-25,-30,-34
	dc		2,7,12,17,23,28,33,38,-2,-7,-12,-17,-23,-28,-33,-38
	dc		2,7,13,18,25,30,36,41,-2,-7,-13,-18,-25,-30,-36,-41
	dc		3,9,15,21,28,34,40,46,-3,-9,-15,-21,-28,-34,-40,-46
	dc		3,10,17,24,31,38,45,52,-3,-10,-17,-24,-31,-38,-45,-52
	dc		3,10,18,25,34,41,49,56,-3,-10,-18,-25,-34,-41,-49,-56
	dc		4,12,21,29,38,46,55,63,-4,-12,-21,-29,-38,-46,-55,-63
	dc		4,13,22,31,41,50,59,68,-4,-13,-22,-31,-41,-50,-59,-68
	dc		5,15,25,35,46,56,66,76,-5,-15,-25,-35,-46,-56,-66,-76
	dc		5,16,27,38,50,61,72,83,-5,-16,-27,-38,-50,-61,-72,-83
	dc		6,18,31,43,56,68,81,93,-6,-18,-31,-43,-56,-68,-81,-93
	dc		6,19,33,46,61,74,88,101,-6,-19,-33,-46,-61,-74,-88,-101
	dc		7,22,37,52,67,82,97,112,-7,-22,-37,-52,-67,-82,-97,-112
	dc		8,24,41,57,74,90,107,123,-8,-24,-41,-57,-74,-90,-107,-123
	dc		9,27,45,63,82,100,118,136,-9,-27,-45,-63,-82,-100,-118,-136
	dc		10,30,50,70,90,110,130,150,-10,-30,-50,-70,-90,-110,-130,-150
	dc		11,33,55,77,99,121,143,165,-11,-33,-55,-77,-99,-121,-143,-165
	dc		12,36,60,84,109,133,157,181,-12,-36,-60,-84,-109,-133,-157,-181
	dc		13,39,66,92,120,146,173,199,-13,-39,-66,-92,-120,-146,-173,-199
	dc		14,43,73,102,132,161,191,220,-14,-43,-73,-102,-132,-161,-191,-220
	dc		16,48,81,113,146,178,211,243,-16,-48,-81,-113,-146,-178,-211,-243
	dc		17,52,88,123,160,195,231,266,-17,-52,-88,-123,-160,-195,-231,-266
	dc		19,58,97,136,176,215,254,293,-19,-58,-97,-136,-176,-215,-254,-293
	dc		21,64,107,150,194,237,280,323,-21,-64,-107,-150,-194,-237,-280,-323
	dc		23,70,118,165,213,260,308,355,-23,-70,-118,-165,-213,-260,-308,-355
	dc		26,78,130,182,235,287,339,391,-26,-78,-130,-182,-235,-287,-339,-391
	dc		28,85,143,200,258,315,373,430,-28,-85,-143,-200,-258,-315,-373,-430
	dc		31,94,157,220,284,347,410,473,-31,-94,-157,-220,-284,-347,-410,-473
	dc		34,103,173,242,313,382,452,521,-34,-103,-173,-242,-313,-382,-452,-521
	dc		38,114,191,267,345,421,498,574,-38,-114,-191,-267,-345,-421,-498,-574
	dc		42,126,210,294,379,463,547,631,-42,-126,-210,-294,-379,-463,-547,-631
	dc		46,138,231,323,417,509,602,694,-46,-138,-231,-323,-417,-509,-602,-694
	dc		51,153,255,357,459,561,663,765,-51,-153,-255,-357,-459,-561,-663,-765
	dc		56,168,280,392,505,617,729,841,-56,-168,-280,-392,-505,-617,-729,-841
	dc		61,184,308,431,555,678,802,925,-61,-184,-308,-431,-555,-678,-802,-925
	dc		68,204,340,476,612,748,884,1020,-68,-204,-340,-476,-612,-748,-884,-1020
	dc		74,223,373,522,672,821,971,1120,-74,-223,-373,-522,-672,-821,-971,-1120
	dc		82,246,411,575,740,904,1069,1233,-82,-246,-411,-575,-740,-904,-1069,-1233
	dc		90,271,452,633,814,995,1176,1357,-90,-271,-452,-633,-814,-995,-1176,-1357
	dc		99,298,497,696,895,1094,1293,1492,-99,-298,-497,-696,-895,-1094,-1293,-1492
	dc		109,328,547,766,985,1204,1423,1642,-109,-328,-547,-766,-985,-1204,-1423,-1642
	dc		120,360,601,841,1083,1323,1564,1804,-120,-360,-601,-841,-1083,-1323,-1564,-1804
	dc		132,397,662,927,1192,1457,1722,1987,-132,-397,-662,-927,-1192,-1457,-1722,-1987
	dc		145,436,728,1019,1311,1602,1894,2185,-145,-436,-728,-1019,-1311,-1602,-1894,-2185
	dc		160,480,801,1121,1442,1762,2083,2403,-160,-480,-801,-1121,-1442,-1762,-2083,-2403
	dc		176,528,881,1233,1587,1939,2292,2644,-176,-528,-881,-1233,-1587,-1939,-2292,-2644
	dc		194,582,970,1358,1746,2134,2522,2910,-194,-582,-970,-1358,-1746,-2134,-2522,-2910

	bss

source_file_name:
	ds.b	128

destination_file_name:
	ds.b	128

source_sample_buffer:
	ds.b	128*1024	

destination_sample_buffer:
	ds.b	128*1024	

	end

